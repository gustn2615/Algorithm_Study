package Baekjoon;

public class P1260 {
    // DFS와 BFS
    // 개념 설명

    // DFS(Depth-First Search)는 깊이 우선 탐색으로, 시작 노드에서
    // 다음 분기로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 알고리즘이다.
    // DFS는 스택 자료구조를 사용한다.
    //
    // 동작 과정
    // 시작 노드를 스택에 넣는다.
    // 스택에서 노드를 꺼낸다.
    // 해당 노드가 방문한 노드가 아니면, 방문 처리를 한다.
    // 해당 노드의 자식 노드 중 방문하지 않은 노드를 스택에 넣는다.
    // 자식 노드 중에서 가장 작은 번호의 노드를 선택하여 스택에 넣는다.
    // 2~5의 과정을 스택이 빌 때까지 반복한다.

    // BFS(Breadth-First Search)는 너비 우선 탐색으로, 시작 노드로부터 인접한 노드를 모두 방문한 후에,
    // 방문한 인접 노드들로부터 다시 그들의 인접 노드를 방문하는 방식으로 탐색하는 알고리즘이다.
    // BFS는 큐 자료구조를 사용한다.
    //
    // 동작 과정
    // 시작 노드를 큐에 넣는다.
    // 큐에서 노드를 꺼낸다.
    // 해당 노드가 방문한 노드가 아니면, 방문 처리를 한다.
    // 해당 노드의 인접 노드 중 방문하지 않은 노드를 큐에 넣는다.
    // 2~4의 과정을 큐가 빌 때까지 반복한다.
    // DFS는 재귀 함수를 이용하여 간결하게 구현할 수 있고, 공간 복잡도가 작아서 대규모 데이터 처리에 유리하다.
    // 반면 BFS는 최단 경로 문제를 해결할 때 가장 유용하며, DFS보다는 좀 더 복잡한 구현이 필요하지만,
    // 어떤 상황에서도 최단 경로를 보장하는 특징이 있다.
}
